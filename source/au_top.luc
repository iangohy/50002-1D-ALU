module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  tester alutester(.clk(clk), .rst(rst));
  //alu alu;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
     
    io_led[0] = alutester.counter;           // test case no. (boolean from 1)
    io_led[0][7:6] = alutester.error;        // io_led[1][0] ON = error in out, io_led[1][1] ON = error in zvn
    alutester.force_error = io_dip[0][0];    // force error by flipping LSB of alu out
    io_led[2] = alutester.debugSum[15:8];
    io_led[1] = alutester.debugSum[7:0];
    /*
    alu.alufn=io_dip[0][5:0];
    alu.a=16x{b1};
    alu.b[15:8] = io_dip[2];
    alu.b[7:0] = io_dip[1];
    io_led[2]=alu.out[15:8];
    io_led[1]=alu.out[7:0];
    io_led[0][3:0]=alu.zvn;
    */
  }
}

////////////DEBUG BOOLEAN///////////////////
/*
    bool.alufn[3:0]=io_dip[0][3:0];
    bool.a=16x{b0};
    bool.b=16x{b0};    
    io_led[2]=bool.out[15:8];
    io_led[1]=bool.out[7:0];
*/
////////////END BOOLEAN///////////////////

///////////DEBUG ADDER//////////////////////
/*
   adder.alufn=io_dip[0][0];
   adder.a=16x{b0};
   adder.b=16x{b0};
   io_led[2]=adder.out[15:8];
   io_led[1]=adder.out[7:0];
   io_led[0][0]=adder.z;
   io_led[0][1]=adder.v;
   io_led[0][2]=adder.n;
*/
///////////END ADDER//////////////////////

///////////DEBUG COMPARE//////////////////////
/*
   compare.alufn[2:1]=io_dip[0][1:0];
   compare.z= io_dip[0][2];
   compare.v=io_dip[0][3];
   compare.n=io_dip[0][4];
   io_led[0][0]=compare.c;

*/
///////////END COMPARE//////////////////////

///////////DEBUG MULTIPLIER//////////////////////
/*
   multiplier.a=16x{b0};
   multiplier.b=16x{b0};
   io_led[2]=multiplier.out[15:8];
   io_led[1]=multiplier.out[7:0];
*/
///////////END MULTIPLIER//////////////////////
