module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));
  seq_plus_one plus_one(.clk(slowclock.value),.rst(rst));
  sixteen_bit_multiplier mult;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    /*
    // Code to test boolean
    bool.alufn[3:0]=io_dip[0][3:0];
    bool.a=16x{b1};
    bool.b=16x{b1};    
    io_led[2]=bool.out[15:8];
    io_led[1]=bool.out[7:0];
    */
    
    mult.a =plus_one.out;
    mult.b[0]=b0;
    mult.b[1]=b1;
    mult.b[15:2]=15x{b0};
    io_led[0]=mult.p[7:0];
    io_led[1]=mult.p[15:8];
    
  }
}