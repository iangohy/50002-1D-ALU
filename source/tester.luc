module tester (
    input clk,  // clock
    input rst,  // reset
    input force_error, // forcefully flips LSB of ALU output (s)
    output counter[5],
    output error[2]
  ) {
  
  fsm testerfsm(.clk(clk), .rst(rst)) = {
    INIT,ADD1,ADD2,SUB1,SUB2,
    MUL1,MUL2,AND,OR,XOR,A,
    SHL1,SHL2,SHR1,SHR2,SRA1,
    CMPEQ,CMPLT,CMPLE,END};
  counter slowClock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  counter slowCounter(#SIZE(5), #DIV(26), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(.clk(clk));
  alu alu16;
  tester_rom testerrom;
  
  sig romdata[60];
  sig processed_out[16];

  always {
    slowClockEdge.in = slowClock.value;
    
    // base outputs
    counter = 5b0;
    error = 0;
    testerrom.address = 0;
    alu16.a = 0;
    alu16.b = 0;
    alu16.alufn = 0;
    
    case(testerfsm.q) {  
      testerfsm.INIT:
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.ADD1;
        }   
      testerfsm.ADD1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.ADD2;
        }
        
      testerfsm.ADD2:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SUB1;
        }
        
      testerfsm.SUB1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SUB2;
        }
        
      testerfsm.SUB2:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.MUL1;
        }
        
      testerfsm.MUL1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.MUL2;
        }
        
      testerfsm.MUL2:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.AND;
        }
        
      testerfsm.AND:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.OR;
        }
        
      testerfsm.OR:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.XOR;
        }
        
      testerfsm.XOR:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.A;
        }
        
       testerfsm.A:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SHL1;
        }
        
      testerfsm.SHL1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SHL2;
        }
        
      testerfsm.SHL2:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SHR1;
        }
        
      testerfsm.SHR1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SHR2;
        }
        
      testerfsm.SHR2:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.SRA1;
        }
        
      testerfsm.SRA1:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.CMPEQ;
        }
        
      testerfsm.CMPEQ:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.CMPLT;
        }
        
      testerfsm.CMPLT:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.CMPLE;
        }
        
      testerfsm.CMPLE:
        counter = slowCounter.value;
        testerrom.address = slowCounter.value;
        counter = slowCounter.value;
        romdata = testerrom.testcase;
        alu16.a = romdata[59:44];
        alu16.b = romdata[43:28];
        alu16.alufn = romdata[25:20];
        
        processed_out = alu16.out;
        if (force_error == b1) {
          processed_out[0] = !processed_out[0]; 
        }
        
        if (processed_out == romdata[19:4] && alu16.zvn == romdata[2:0]) {
          error = 2b0;
        } else if (processed_out != romdata[19:4]) {
          error = 2b1;
        } else if (alu16.zvn != romdata[2:0]) {
          error = 2b10;
        } else {
          error = 2b11;
        }
        
        if (slowClockEdge.out == b1) { //only trigger change when slowClockEdge gives a 1
          testerfsm.d = testerfsm.END;
        }
        
      testerfsm.END:
        counter = 8hFF;
        error = 0;
    }
  }
}
