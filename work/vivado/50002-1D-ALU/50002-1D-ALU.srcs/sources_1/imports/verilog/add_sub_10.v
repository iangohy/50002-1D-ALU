/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module add_sub_10 (
    input [15:0] a,
    input [15:0] b,
    input alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [(5'h10+0)-1:0] M_fulladder_s;
  wire [(5'h10+0)-1:0] M_fulladder_cout;
  reg [(5'h10+0)-1:0] M_fulladder_x;
  reg [(5'h10+0)-1:0] M_fulladder_y;
  reg [(5'h10+0)-1:0] M_fulladder_cin;
  
  genvar GEN_fulladder0;
  generate
  for (GEN_fulladder0=0;GEN_fulladder0<5'h10;GEN_fulladder0=GEN_fulladder0+1) begin: fulladder_gen_0
    full_adder_16 fulladder (
      .x(M_fulladder_x[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .y(M_fulladder_y[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder_cin[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .s(M_fulladder_s[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder_cout[GEN_fulladder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  reg cout;
  
  reg [7:0] orz_8;
  
  reg [3:0] orz_4;
  
  reg [1:0] orz_2;
  
  reg orz_1;
  
  reg xor1;
  
  reg and_1;
  
  reg and_2;
  
  reg and_3;
  
  reg and_4;
  
  always @* begin
    M_fulladder_x = a;
    M_fulladder_y = b ^ {5'h10{alufn}};
    M_fulladder_cin[0+0-:1] = alufn;
    M_fulladder_cin[1+14-:15] = M_fulladder_cout[0+14-:15];
    out = M_fulladder_s;
    cout = M_fulladder_cout[15+0-:1];
    orz_8 = M_fulladder_s[0+7-:8] | M_fulladder_s[8+7-:8];
    orz_4 = orz_8[0+3-:4] | orz_8[4+3-:4];
    orz_2 = orz_4[0+1-:2] | orz_4[2+1-:2];
    orz_1 = orz_2[0+0-:1] | orz_2[1+0-:1];
    z = ~orz_1;
    xor1 = alufn ^ b[15+0-:1];
    and_1 = xor1 & a[15+0-:1];
    and_2 = and_1 & ~M_fulladder_s[15+0-:1];
    and_3 = ~xor1 & ~a[15+0-:1];
    and_4 = and_3 & M_fulladder_s[15+0-:1];
    v = and_2 | and_4;
    n = M_fulladder_s[15+0-:1];
  end
endmodule
